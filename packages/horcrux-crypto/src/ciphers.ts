import nacl from 'tweetnacl'
import { utf8, b64 } from './codec'

/**
 * Encrypt a message in a self-contained string format.

 * Uses TweetNaCl Box (x25519-xsalsa20-poly1305) with an
 * ephemeral key pair on this end, where the secret key
 * is discarded and the public key sent in the message.
 *
 * @param message - The message to encrypt (utf8 string)
 * @param publicKey - TweetNaCl Box public key, base64-url encoded or from keyPair
 */
export const encryptNaClBox = (
  message: string,
  publicKey: string | Uint8Array
) => {
  const keyPair = nacl.box.keyPair()
  const nonce = nacl.randomBytes(nacl.box.nonceLength)
  const ciphertext = nacl.box(
    utf8.encode(message),
    nonce,
    typeof publicKey === 'string' ? b64.decode(publicKey) : publicKey,
    keyPair.secretKey
  )
  return [
    'v1',
    'naclbox',
    b64.encode(keyPair.publicKey),
    b64.encode(nonce),
    b64.encode(ciphertext)
  ].join('.')
}

/**
 * Decrypt a message generated by encryptNaClBox.
 *
 * The message contains the X25519 public key, so you just specify
 * your secret key (corresponding to the public key that was used
 * to encrypt the message) and get an UTF8 string back.
 *
 * @param message - A message generated by encryptNaClBox
 * @param secretKey - TweetNaCl Box secret key, base64-url encoded or from a keyPair
 */
export const decryptNaClBox = (
  message: string,
  secretKey: string | Uint8Array
) => {
  if (!message.startsWith('v1.')) {
    throw new Error('Unknown format')
  }
  const [algorithm, publicKey, nonce, ciphertext] = message.split('.').slice(1)
  if (algorithm !== 'naclbox') {
    throw new Error('Unsupported cipher')
  }
  const cleartext = nacl.box.open(
    b64.decode(ciphertext),
    b64.decode(nonce),
    b64.decode(publicKey),
    typeof secretKey === 'string' ? b64.decode(secretKey) : secretKey
  )
  if (!cleartext) {
    throw new Error('Failed to decrypt naclbox message')
  }
  return utf8.decode(cleartext)
}
